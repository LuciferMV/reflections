
Q1: What happens when you initialize a repository? Why do you need to do it?

Ans: When we initialize a repository using git init, it becomes a git repository, capable of version control...
A new subdirectory called ".git" is created in it.
Now we can do all such operations as commits,etc.. on this.

-------------------------------------------------------------------

Q2: How is the staging area different from the working directory and the repository? What value do you think it offers?

Ans: Working directory is just a directory with our files and all.
No special mechanisms of version control..
Repository is the version controlled system, of our files, having 
all necessary features to implement rollback and all..
Staging area is the intermediary, has the files to be added to the next commit our repository, from our present working directory.

The value it offers is that it provides us a stage for our present 
work, so that we can save it to next commit.

-------------------------------------------------------------------

Q3: How can you use the staging area to make sure you have one commit per logical change?

Ans: Use "git diff --staged" to find out the differences between staging area and the last commit, by which I can see if I am not making more than one logical change in this.

-------------------------------------------------------------------------

Q4: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Ans: When introducing some new experimental features.
Branches would prevent cluttering and prevent from being detached , which would happen otherwise if the previous version (commit) would have 
been buggy, and hence would need to be removed from the repository.

----------------------------------------------------------------------------

Q5: How do the diagrams help you visualize the branch structure?

Ans: Diagram makes it quite easy to form a basic idea of the sequence of our commits.
It also helps to prevent the situation of losing our "detached head commits".

-------------------------------------------------------------------------

Q6: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Ans: Merging 2 branches, combines their effect into one. Thus, consequently,
the different functionalitis would be combined.
We represent it in the diagram as such because this way provides us most 
information about the history too.

-----------------------------------------------------------------------------

Q7: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Ans: Pros include automation, which saves much of our efforts, time and also prevents from further human errors which might be encountered.
Cons include that it may lead to merge conflict, due some logical problems, which , as of now, only human beings can understand.

----------------------------------------------------------------------------